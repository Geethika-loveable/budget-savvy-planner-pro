
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import EventForm from '@/components/EventForm';
import { Calendar, MapPin, DollarSign, Download, Trash2 } from 'lucide-react';
import { currencies, getCurrencySymbol } from '@/utils/currencies';
import { useToast } from '@/hooks/use-toast';

interface Event {
  id: string;
  title: string;
  type: 'Trip' | 'Event';
  totalPlanned: number;
  currency: string;
  status: 'Planning' | 'Completed';
  createdAt: string;
  items: Array<{
    name: string;
    category: string;
    planned: number;
    notes: string;
  }>;
}

const Events = () => {
  const [events, setEvents] = useState<Event[]>([]);
  const [showEventForm, setShowEventForm] = useState(false);
  const [selectedCurrency, setSelectedCurrency] = useState('USD');
  const [showLoginPrompt, setShowLoginPrompt] = useState(false);
  const { toast } = useToast();

  const addEvent = (eventData: Omit<Event, 'id' | 'createdAt'>) => {
    const newEvent: Event = {
      ...eventData,
      id: Date.now().toString(),
      createdAt: new Date().toISOString()
    };
    setEvents(prev => [...prev, newEvent]);
    setShowEventForm(false);
    toast({
      title: "Budget Created",
      description: "Your budget has been created successfully!",
    });
  };

  const deleteEvent = (eventId: string) => {
    setEvents(prev => prev.filter(event => event.id !== eventId));
    toast({
      title: "Budget Deleted",
      description: "Budget has been removed successfully.",
    });
  };

  const handleDownload = (event: Event) => {
    const user = localStorage.getItem('user');
    if (!user) {
      setShowLoginPrompt(true);
      return;
    }
    
    // Generate PDF content
    const content = generatePDFContent(event);
    downloadPDF(content, `${event.title}-budget.pdf`);
  };

  const generatePDFContent = (event: Event) => {
    const currencySymbol = getCurrencySymbol(event.currency);
    const columnTitle = event.status === 'Completed' ? 'Expense' : 'Planned';
    
    return `
=====================================================
                   SMARTBUDGET REPORT
=====================================================

Budget: ${event.title}
Type: ${event.type}
Status: ${event.status}
Currency: ${event.currency}
Total ${columnTitle}: ${currencySymbol}${event.totalPlanned}
Created: ${new Date(event.createdAt).toLocaleDateString()}

=====================================================
                    BUDGET ITEMS
=====================================================

${event.items.map(item => 
`${item.name}
Category: ${item.category}
${columnTitle}: ${currencySymbol}${item.planned}${item.notes ? '\nNotes: ' + item.notes : ''}
-----------------------------------------------------`
).join('\n')}

=====================================================
                 BUDGET SUMMARY
=====================================================

Total ${columnTitle}: ${currencySymbol}${event.totalPlanned}
Number of Items: ${event.items.length}

=====================================================
Generated by SmartBudget
Date: ${new Date().toLocaleDateString()}
Time: ${new Date().toLocaleTimeString()}
=====================================================
    `;
  };

  const downloadPDF = (content: string, filename: string) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Download Complete",
      description: "Your budget report has been downloaded!",
    });
  };

  const planningEvents = events.filter(e => e.status === 'Planning');
  const completedEvents = events.filter(e => e.status === 'Completed');

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
      <nav className="bg-black/50 backdrop-blur-md border-b border-purple-500/20 px-4 py-3">
        <div className="container mx-auto flex justify-between items-center">
          <div className="flex items-center space-x-8">
            <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
              SmartBudget
            </h1>
            <p className="text-gray-300">Event & Trip Budget Planner</p>
          </div>
          
          <div className="flex items-center space-x-4">
            <Select value={selectedCurrency} onValueChange={setSelectedCurrency}>
              <SelectTrigger className="w-32 bg-slate-800/50 border-purple-500/30 text-white">
                <SelectValue />
              </SelectTrigger>
              <SelectContent className="bg-slate-800 border-purple-500/30">
                {currencies.map(currency => (
                  <SelectItem key={currency.code} value={currency.code} className="text-white hover:bg-purple-600/20">
                    {currency.code} ({currency.symbol})
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Button variant="outline" onClick={() => window.location.href = '/login'} className="border-purple-500/30 text-purple-300 hover:bg-purple-600/20">
              Sign In
            </Button>
          </div>
        </div>
      </nav>
      
      <div className="container mx-auto px-4 py-8">
        <div className="flex justify-between items-center mb-8">
          <div>
            <h2 className="text-3xl font-bold text-white mb-2">Your Events & Trips</h2>
            <p className="text-gray-300">Plan and track budgets for your upcoming and past events</p>
          </div>
          <Button 
            onClick={() => setShowEventForm(true)}
            className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
          >
            New Budget
          </Button>
        </div>

        {/* Planning Events */}
        <div className="mb-8">
          <h3 className="text-xl font-semibold text-white mb-4">Planning Events</h3>
          {planningEvents.length === 0 ? (
            <Card className="bg-slate-800/50 border-purple-500/20">
              <CardContent className="p-12 text-center">
                <Calendar className="h-16 w-16 text-purple-400 mx-auto mb-4" />
                <h4 className="text-xl font-semibold text-white mb-2">No Events Yet</h4>
                <p className="text-gray-300 mb-6">
                  Create your first event or trip budget to get started with planning!
                </p>
                <Button 
                  onClick={() => setShowEventForm(true)}
                  className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
                >
                  Create Your First Budget
                </Button>
              </CardContent>
            </Card>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {planningEvents.map((event) => (
                <EventCard key={event.id} event={event} onDownload={handleDownload} onDelete={deleteEvent} />
              ))}
            </div>
          )}
        </div>

        {/* Completed Events */}
        {completedEvents.length > 0 && (
          <div>
            <h3 className="text-xl font-semibold text-white mb-4">Past Events</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {completedEvents.map((event) => (
                <EventCard key={event.id} event={event} onDownload={handleDownload} onDelete={deleteEvent} />
              ))}
            </div>
          </div>
        )}
      </div>

      {showEventForm && (
        <EventForm
          onAddEvent={addEvent}
          onClose={() => setShowEventForm(false)}
          defaultCurrency={selectedCurrency}
        />
      )}

      {showLoginPrompt && (
        <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center p-4 z-50">
          <Card className="w-full max-w-md bg-slate-800 border-purple-500/30">
            <CardHeader>
              <CardTitle className="text-white">Sign In Required</CardTitle>
              <CardDescription className="text-gray-300">
                You need to sign in to download your budget reports
              </CardDescription>
            </CardHeader>
            <CardContent className="flex space-x-2">
              <Button onClick={() => window.location.href = '/login'} className="flex-1 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700">
                Sign In
              </Button>
              <Button variant="outline" onClick={() => setShowLoginPrompt(false)} className="border-purple-500/30 text-purple-300 hover:bg-purple-600/20">
                Cancel
              </Button>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
};

const EventCard = ({ event, onDownload, onDelete }: { 
  event: Event; 
  onDownload: (event: Event) => void;
  onDelete: (eventId: string) => void;
}) => {
  const currencySymbol = getCurrencySymbol(event.currency);
  const columnTitle = event.status === 'Completed' ? 'Expense' : 'Planned';
  
  return (
    <Card className="hover:shadow-2xl transition-all duration-300 bg-slate-800/50 border-purple-500/20 hover:border-purple-400/40">
      <CardHeader>
        <div className="flex justify-between items-start">
          <div>
            <CardTitle className="text-lg text-white">{event.title}</CardTitle>
            <CardDescription className="text-gray-400">
              {new Date(event.createdAt).toLocaleDateString()}
            </CardDescription>
          </div>
          <div className="flex flex-col space-y-1">
            <Badge variant={event.type === 'Trip' ? 'default' : 'secondary'} className="bg-blue-600/20 text-blue-300 border-blue-500/30">
              {event.type}
            </Badge>
            <Badge variant={event.status === 'Planning' ? 'outline' : 'secondary'} className={event.status === 'Planning' ? 'border-purple-500/30 text-purple-300' : 'bg-green-600/20 text-green-300 border-green-500/30'}>
              {event.status}
            </Badge>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          <div className="flex items-center space-x-2">
            <DollarSign className="h-4 w-4 text-blue-400" />
            <span className="text-sm text-gray-300">
              {columnTitle}: <span className="font-semibold text-white">{currencySymbol}{event.totalPlanned}</span>
            </span>
          </div>
          <div className="flex items-center space-x-2">
            <MapPin className="h-4 w-4 text-gray-400" />
            <span className="text-sm text-gray-300">
              {event.items.length} budget items
            </span>
          </div>
        </div>
        <div className="mt-4 pt-4 border-t border-purple-500/20 space-y-2">
          <Button 
            variant="outline" 
            className="w-full bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white border-green-500/30" 
            onClick={() => onDownload(event)}
          >
            <Download className="h-4 w-4 mr-2" />
            Download Complete
          </Button>
          <Button 
            variant="outline"
            className="w-full border-red-500/30 text-red-300 hover:bg-red-600/20"
            onClick={() => onDelete(event.id)}
          >
            <Trash2 className="h-4 w-4 mr-2" />
            Delete Budget
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default Events;
