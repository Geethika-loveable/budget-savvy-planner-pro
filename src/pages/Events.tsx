
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import EventForm from '@/components/EventForm';
import { Calendar, MapPin, DollarSign, Download } from 'lucide-react';
import { currencies, getCurrencySymbol } from '@/utils/currencies';
import { useToast } from '@/hooks/use-toast';

interface Event {
  id: string;
  title: string;
  type: 'Trip' | 'Event';
  totalPlanned: number;
  currency: string;
  status: 'Planning' | 'Completed';
  createdAt: string;
  items: Array<{
    name: string;
    category: string;
    planned: number;
    notes: string;
  }>;
}

const Events = () => {
  const [events, setEvents] = useState<Event[]>([]);
  const [showEventForm, setShowEventForm] = useState(false);
  const [selectedCurrency, setSelectedCurrency] = useState('USD');
  const [showLoginPrompt, setShowLoginPrompt] = useState(false);
  const { toast } = useToast();

  const addEvent = (eventData: Omit<Event, 'id' | 'createdAt'>) => {
    const newEvent: Event = {
      ...eventData,
      id: Date.now().toString(),
      createdAt: new Date().toISOString()
    };
    setEvents(prev => [...prev, newEvent]);
    setShowEventForm(false);
    toast({
      title: "Event Created",
      description: "Your event budget has been created successfully!",
    });
  };

  const handleDownload = (event: Event) => {
    const user = localStorage.getItem('user');
    if (!user) {
      setShowLoginPrompt(true);
      return;
    }
    
    // Generate PDF content
    const content = generatePDFContent(event);
    downloadPDF(content, `${event.title}-budget.pdf`);
  };

  const generatePDFContent = (event: Event) => {
    const currencySymbol = getCurrencySymbol(event.currency);
    return `
Budget Report: ${event.title}
Type: ${event.type}
Status: ${event.status}
Currency: ${event.currency}
Total Planned: ${currencySymbol}${event.totalPlanned}
Created: ${new Date(event.createdAt).toLocaleDateString()}

Budget Items:
${event.items.map(item => 
  `${item.name} (${item.category}): ${currencySymbol}${item.planned}${item.notes ? ' - ' + item.notes : ''}`
).join('\n')}

Generated by SmartBudget
    `;
  };

  const downloadPDF = (content: string, filename: string) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Download Complete",
      description: "Your budget report has been downloaded!",
    });
  };

  const planningEvents = events.filter(e => e.status === 'Planning');
  const completedEvents = events.filter(e => e.status === 'Completed');

  return (
    <div className="min-h-screen bg-gray-50">
      <nav className="bg-white border-b border-gray-200 px-4 py-3">
        <div className="container mx-auto flex justify-between items-center">
          <div className="flex items-center space-x-8">
            <h1 className="text-2xl font-bold text-blue-600">SmartBudget</h1>
            <p className="text-gray-600">Event & Trip Budget Planner</p>
          </div>
          
          <div className="flex items-center space-x-4">
            <Select value={selectedCurrency} onValueChange={setSelectedCurrency}>
              <SelectTrigger className="w-32">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {currencies.map(currency => (
                  <SelectItem key={currency.code} value={currency.code}>
                    {currency.code} ({currency.symbol})
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Button variant="outline" onClick={() => window.location.href = '/login'}>
              Sign In
            </Button>
          </div>
        </div>
      </nav>
      
      <div className="container mx-auto px-4 py-8">
        <div className="flex justify-between items-center mb-8">
          <div>
            <h2 className="text-3xl font-bold text-gray-900 mb-2">Your Events & Trips</h2>
            <p className="text-gray-600">Plan and track budgets for your upcoming and past events</p>
          </div>
          <Button onClick={() => setShowEventForm(true)}>
            Create New Event
          </Button>
        </div>

        {/* Planning Events */}
        <div className="mb-8">
          <h3 className="text-xl font-semibold mb-4">Planning Events</h3>
          {planningEvents.length === 0 ? (
            <Card>
              <CardContent className="p-12 text-center">
                <Calendar className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                <h4 className="text-xl font-semibold text-gray-900 mb-2">No Events Yet</h4>
                <p className="text-gray-600 mb-6">
                  Create your first event or trip budget to get started with planning!
                </p>
                <Button onClick={() => setShowEventForm(true)}>
                  Create Your First Event
                </Button>
              </CardContent>
            </Card>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {planningEvents.map((event) => (
                <EventCard key={event.id} event={event} onDownload={handleDownload} />
              ))}
            </div>
          )}
        </div>

        {/* Completed Events */}
        {completedEvents.length > 0 && (
          <div>
            <h3 className="text-xl font-semibold mb-4">Past Events</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {completedEvents.map((event) => (
                <EventCard key={event.id} event={event} onDownload={handleDownload} />
              ))}
            </div>
          </div>
        )}
      </div>

      {showEventForm && (
        <EventForm
          onAddEvent={addEvent}
          onClose={() => setShowEventForm(false)}
          defaultCurrency={selectedCurrency}
        />
      )}

      {showLoginPrompt && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <Card className="w-full max-w-md">
            <CardHeader>
              <CardTitle>Sign In Required</CardTitle>
              <CardDescription>
                You need to sign in to download your budget reports
              </CardDescription>
            </CardHeader>
            <CardContent className="flex space-x-2">
              <Button onClick={() => window.location.href = '/login'} className="flex-1">
                Sign In
              </Button>
              <Button variant="outline" onClick={() => setShowLoginPrompt(false)}>
                Cancel
              </Button>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
};

const EventCard = ({ event, onDownload }: { event: Event; onDownload: (event: Event) => void }) => {
  const currencySymbol = getCurrencySymbol(event.currency);
  
  return (
    <Card className="hover:shadow-lg transition-shadow">
      <CardHeader>
        <div className="flex justify-between items-start">
          <div>
            <CardTitle className="text-lg">{event.title}</CardTitle>
            <CardDescription>
              {new Date(event.createdAt).toLocaleDateString()}
            </CardDescription>
          </div>
          <div className="flex flex-col space-y-1">
            <Badge variant={event.type === 'Trip' ? 'default' : 'secondary'}>
              {event.type}
            </Badge>
            <Badge variant={event.status === 'Planning' ? 'outline' : 'secondary'}>
              {event.status}
            </Badge>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          <div className="flex items-center space-x-2">
            <DollarSign className="h-4 w-4 text-blue-600" />
            <span className="text-sm">
              Budget: <span className="font-semibold">{currencySymbol}{event.totalPlanned}</span>
            </span>
          </div>
          <div className="flex items-center space-x-2">
            <MapPin className="h-4 w-4 text-gray-600" />
            <span className="text-sm">
              {event.items.length} budget items
            </span>
          </div>
        </div>
        <div className="mt-4 pt-4 border-t space-y-2">
          <Button 
            variant="outline" 
            className="w-full" 
            onClick={() => onDownload(event)}
          >
            <Download className="h-4 w-4 mr-2" />
            Download Budget
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default Events;
